#hello git

##git 명령어 요약
- clone: 원격 저장소(github)를 내 컴퓨터에 복사
- add: 내 컴퓨터에서 작업한 파일들을 스테이지에 추가
- commit: 스테이지에 올라온 파일들을 가지고 내 컴퓨터에 저장 (세이브와 같다.)
- push: 원격 저장소에 커밋들을 업로드

- 순서 : add -> commit -> push

##파일의 내용 되돌리기
- 특정 파일의 내용을 마지막 커밋으로 돌리고 싶다면 해당 파일 선택 후 '코드 뭉치 버리기' 선택

##브랜치 변경하기
- 브랜치 (branch): 기존 내용을 유지한 채 새로운 내용을 추가하고 싶을 때 사용
- 머지 (merge): 한 브랜치의 내용을 다른 브랜치에 반영
- 체크아웃 (checkout): 저장소에서 특정 브랜치(혹은 커밋)로 돌아가고 싶을 때 사용 **소스트리의 체크아웃은 브랜치 이름 더블 클릭하는 것 만으로도 가능

## 새로운 브랜치 만들기 
- 원하는 커밋을 만들고 우클릭, 새 브랜치 이름 입력하면 커밋으로부터 브랜치가 생긴다.

## 원하는 브랜치로 돌아가기
- checkout: 왼쪽의 브랜치 메뉴에서 브랜치를 선택하고 더블 클릭하면 해당 브랜치로 돌아간다.

##병합하기 1
- 헤드 브랜치에 변경사항이 없고
- 병합 대상 브랜치가 헤드로부터 시작된 경우
- 아주 쉽게 병합 가능 = Fast-forward

##병합하기 2
- 헤드 브랜치에 추가적인 커밋이 생기는 경우
- 진짜 병합이 필요해진다.
- 충돌이 안 나면 좋은데, 충돌이 나도 겁내지 말자! 

##병합해서 충돌이 안 나려면?
- 보통 다른 파일에서 작업을 하면 충돌이 안 납니다.

##충돌 해결하기
- 제일 중요한 점: 겁내지 말아요!
- 같은 파일을 병함 대상 두 커밋에서 동시 수정했을 경우 충돌이 날 확률이 높다!
- 에디터 사용, 혹은 SourceTree를 사용해서 충돌 해결 가능하다.


##커밋 되돌리기
###1. reset(SourceTree에서는 '이 커밋까지 현재 브랜치를 초기화')
- git reset --hard 에 해당하는 명령으로 커밋을 되돌리기
- reset 이후 push --force 옵션을 선택해야 함(위험도가 큼)
- 이전 커밋은 사라짐
- 장점: 쉽다. 
- 단점: 커밋이 날아간다. 그리고 강제 push가 필요하다.(SourceTree에서는 강제푸시가 불가)
- 웬만하면 사용하지 말기!

###2. branch 만들어서 되돌리기
- reset과는 다르게 내용이 사라지지 않는다.
- 장점: 쉽다. 기록이 다 남아있다.
- 단점: 트리가 지저분해진다.(큰 문제는 아님)

###3. revert
- 대상 커밋을 HEAD커밋의 자식으로 새로 생성
- revert 대상 커밋은 사라지지 않고 revert 대상 커밋의 내용을 되돌린 새로운 커밋이 생겨난다.
- 장점: 이전 커밋 기록이 다 남아 있다.
- 단점: 충돌 날 가능성이 매우 높다. 다소 어렵다.

- revert로 여러 커밋을 되돌리려면 최신부터 순서대로 revert 하자.
- 그렇게 하면 충돌을 막을 수 있다.

##커밋 덮어쓰기
- 필요하다면 이전 커밋 덮어쓰기도 가능
- 'commit --amend'
- 이미 push를 한 경우 'push --force'가 필요함


##stash(임시저장)
- 다른 브랜치로 체크아웃하기 전에 현재 작업내용을 저장하는 임시 저장소
- 유용하니 잘 사용하자.


## 기타 주의 사항
- 코드를 남기려고 주석을 달지 말자.
- 커밋 메세지를 잘 쓰자.
- 한가지 구현이 완료될 때마다 커밋을 하자.(자주 하자.)

##rebase
- 병합(merge)과 마찬가지로 두 브랜치의 내용을 하나로 합치고 싶을 때 사용
- rebase는 기본 merge와는 달리 트리가 더 깔끔하게 유지됨 하지만 위험하니 조심스레 사용하자.
- 장점: 깔끔한 트리
- 단점: 충돌 가능성이 더 높다. 위험하다.이미 원격에 있는 브랜치를 rebase 하면 안 된다!
